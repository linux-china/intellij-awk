/*
    Grammar based on https://pubs.opengroup.org/onlinepubs/7908799/xcu/awk.html#tag_000_000_108_016
*/
{
  parserClass="intellij_awk.AwkParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

// TODO maybe this can be of use
//  implements="intellij_awk.psi.AwkBaseElement"

  psiClassPrefix="Awk"
  psiImplClassSuffix="Impl"
  psiPackage="intellij_awk.psi"
  psiImplPackage="intellij_awk.psi.impl"

  elementTypeHolderClass="intellij_awk.psi.AwkTypes"
  elementTypeClass="intellij_awk.psi.AwkElementType"
  tokenTypeClass="intellij_awk.psi.AwkTokenType"

// %token VAR_NAME NUMBER STRING ERE
// %token FUNC_NAME   /* name followed by '(' without white space */
//
// /* Keywords  */
// %token       Begin   End
// /*          'BEGIN' 'END'                            */
//
// %token       Break   Continue   Delete   Do   Else
// /*          'break' 'continue' 'delete' 'do' 'else'  */
//
// %token       Exit   For   Function   If   In
// /*          'exit' 'for' 'function' 'if' 'in'        */
//
// %token       Next   Print   Printf   Return   While
// /*          'next' 'print' 'printf' 'return' 'while' */
//
// /* Reserved function names */
// %token BUILTIN_FUNC_NAME
//             /* one token for the following:
//              * atan2 cos sin exp log sqrt int rand srand
//              * gsub index length match split sprintf sub
//              * substr tolower toupper close system
//              */
// %token GETLINE
//             /* Syntactically different from other built-ins */
//
// /* Two-character tokens */
// %token ADD_ASSIGN SUB_ASSIGN MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN POW_ASSIGN
// /*     '+='       '-='       '*='       '/='       '%='       '^=' */
//
// %token  OR   AND  NO_MATCH   EQ   LE   GE   NE   INCR  DECR  APPEND
// /*      '||' '&&' '!~' '==' '<=' '>=' '!=' '++'  '--'  '>>'   */
//
// /* One-character tokens */
// %token '{' '}' '(' ')' '[' ']' ',' ';' NEWLINE
// %token '+' '-' '*' '%' '^' '!' '>' '<' '|' '?' ':' '~' '$' '='

  tokens = [
    comment='regexp:#.*'
    BEGINFILE='BEGINFILE'
    ENDFILE='ENDFILE'
    BEGIN='BEGIN'
    END='END'
    BREAK='break'
    CONTINUE='continue'
    DELETE='delete'
    DO='do'
    ELSE='else'
    EXIT='exit'
    FOR='for'
    FUNCTION='regexp:function|func'
    IF='if'
    IN='in'
    NEXTFILE='nextfile'
    NEXT='next'
    PRINT='print'
    PRINTF='printf'
    RETURN='return'
    WHILE='while'

    SWITCH='switch'
    CASE='case'
    DEFAULT='default'

    NAMESPACE='namespace'
    INCLUDE='include'
    LOAD='load'

    BUILTIN_FUNC_NAME='regexp:atan2|cos|sin|exp|log|sqrt|int|rand|srand|gsub|index|length|match|split|sprintf|sub|substr|tolower|toupper|close|fflush|system'
    BUILTIN_FUNC_NAME_GAWK='regexp:asort|asorti|gensub|patsplit|strtonum|mktime|strftime|systime|and|compl|lshift|or|rshift|xor|isarray|typeof|bindtextdomain|dcgettext|dcngettext'
    NUMBER='regexp:(\d+|(\d*\.\d+)|(\d+\.\d*))([eE][+-]?\d+)?'
    STRING='regexp:("([^"\n\\]|\\.|\\\n)*")'
    ERE='regexp:/((\[\^?/)|[^\\\n/]|(\\[^\n]))*/'
    TYPED_ERE='regexp:@/((\[\^?/)|[^\\\n/]|(\\[^\n]))*/'
    GETLINE='getline'
    ADD_ASSIGN='+='
    SUB_ASSIGN='-='
    MUL_ASSIGN='*='
    DIV_ASSIGN='/='
    MOD_ASSIGN='%='
    POW_ASSIGN='^='
    OR='||'
    AND='&&'
    NO_MATCH='!~'
    EQ='=='
    LE='<='
    GE='>='
    NE='!='
    INCR='++'
    DECR='--'
    APPEND='>>'
    NEWLINE='regexp:\r\n|\n'
    DOLLAR='$' // for some reason $ doesn't work inline

    LBRACKET='['
    RBRACKET=']'
    LBRACE='{'
    RBRACE='}'
    LPAREN='('
    RPAREN=')'

    COMMA=','
    SEMICOLON=';'

    LT='<'
    GT='>'
    ADD='+'
    SUB='-'
    MUL='*'
    DIV='/'
    MOD='%'
    POW='^'
    MATCH='~'
    PIPE_AMP='|&'
    PIPE='|'
    NOT='!'
    QUESTION='?'
    COLON=':'
    ASSIGN='='
    AT='@'

    /*
    The token VAR_NAME      consists of a word that is not a keyword or a name of a built-in function and is not followed immediately (without any delimiters) by the "(" character.
    The token FUNC_NAME consists of a word that is not a keyword or a name of a built-in function, followed immediately (without any delimiters) by the "(" character. The "(" character will not be included as part of the token.
    */
    FUNC_NAME='regexp:([a-zA-Z_]+[a-zA-Z_\d]*::)?[a-zA-Z_]+[a-zA-Z_\d]*(?=\()'

    // via https://pubs.opengroup.org/onlinepubs/9699919799/utilities/awk.html
    SPECIAL_VAR_NAME='regexp:([a-zA-Z_]+[a-zA-Z_\d]*::)?(ARGC|ARGV|CONVFMT|ENVIRON|FILENAME|FNR|FS|NF|NR|OFMT|OFS|ORS|RLENGTH|RS|RSTART|SUBSEP)'
    SPECIAL_VAR_NAME_GAWK='regexp:([a-zA-Z_]+[a-zA-Z_\d]*::)?(BINMODE|FIELDWIDTHS|FPAT|IGNORECASE|LINT|PREC|ROUNDMODE|TEXTDOMAIN|ARGIND|ERRNO|FUNCTAB|PROCINFO|RT|SYMTAB)'
    VAR_NAME='regexp:([a-zA-Z_]+[a-zA-Z_\d]*::)?[a-zA-Z_]+[a-zA-Z_\d]*'
    // this is a special grammar for "preview only" because grammar-kit seems to not
    // support whitespaces
    livePreviewWs='regexp:[ \t]*(\\\n)*'
  ]

  extends("unary_expr|non_unary_expr")=expr
  extends("begin_block|end_block")=begin_or_end
  extends("function_call_user|function_call_built_in")=function_call_expr
}

// /pattern/
// /pattern/ { ... }
// function f() { ... }
// TODO this won't parse 'BEGIN {} ;;;'
program ::= newlines_opt (item terminator?)* newlines_opt

// BEGIN { ... }
// { ... }
// 1
// function a() { ... }
item             ::= FUNCTION function_name param_list_start RPAREN
                       newlines_opt action

                     // TODO this leaves us too permissive: it will parse: @namespace "a" @namespace "b"
                     // TODO but otherwise IDEA for some reason doesn't parse single @namespace "a"
                   | AT ( (NAMESPACE | LOAD) STRING
                        | INCLUDE include_path) /*terminator*/

                   | pattern action?
                   | action

private param_list_start ::= LPAREN param_list? {
    pin=1
    recoverWhile=recover_on_rparen
}

include_path     ::= STRING {
    mixin="intellij_awk.psi.AwkIncludePathMixin"
    implements="intellij_awk.psi.AwkNamedElement"
}

function_name    ::= FUNC_NAME | VAR_NAME {
    mixin="intellij_awk.psi.AwkFunctionNameMixin"
    implements="intellij_awk.psi.AwkNamedElement"
    stubClass="intellij_awk.psi.AwkFunctionNameStub"
    elementTypeFactory="intellij_awk.psi.AwkElementType.getStubBasedElementType"
}

param_list       ::= var_name (COMMA newlines_opt var_name)*

pattern          ::= begin_or_end | BEGINFILE | ENDFILE
                 | expr (COMMA newlines_opt expr)?

begin_or_end     ::= begin_block | end_block {
    mixin="intellij_awk.psi.AwkBeginEndMixin"
    implements="intellij_awk.psi.AwkNamedElement"
}

begin_block            ::= BEGIN
end_block              ::= END

action           ::= LBRACE newlines_opt (
                         RBRACE
                       | terminated_statement_list   RBRACE
                       | unterminated_statement_list RBRACE
                   )

private terminator       ::= (NEWLINE|SEMICOLON) newlines_opt

terminated_statement_list ::= terminated_statement+

unterminated_statement_list ::= terminated_statement_list unterminated_statement
                 | unterminated_statement

terminated_statement ::= action newlines_opt
                 | terminated_statement_if
                 | terminated_statement_while
                 | terminated_statement_for
                 | gawk_terminated_statement_switch
                 | SEMICOLON newlines_opt
                 | terminatable_statement terminator

private terminated_statement_if ::= IF LPAREN expr RPAREN newlines_opt terminated_statement
                                  ( ELSE newlines_opt terminated_statement
                                  | !ELSE
                                  )

private terminated_statement_while ::= WHILE LPAREN expr RPAREN newlines_opt terminated_statement
private terminated_statement_for ::=
                   FOR LPAREN (
                     simple_statement_opt SEMICOLON newlines_opt expr_opt SEMICOLON newlines_opt simple_statement_opt RPAREN newlines_opt
                      terminated_statement
                   | var_name IN gawk_var_name RPAREN newlines_opt
                      terminated_statement
                   )

gawk_terminated_statement_switch ::= switch_start RBRACE newlines_opt

private switch_start ::= SWITCH LPAREN expr RPAREN newlines_opt LBRACE newlines_opt case_statement*
                        {
                            pin=6
                            recoverWhile=recover_switch
                        }

private recover_switch ::= !RBRACE

case_statement  ::= ((CASE case_value | DEFAULT) COLON newlines_opt)+ (
                                        terminated_statement_list (&CASE | &DEFAULT | &RBRACE)
                                      | [unterminated_statement_list] &RBRACE )

private case_value      ::= ([ADD|SUB] NUMBER) | STRING | ERE | TYPED_ERE

unterminated_statement ::= terminatable_statement
                 | unterminated_statement_if
                 | unterminated_statement_while
                 | unterminated_statement_for


private unterminated_statement_if ::=
                   IF LPAREN expr RPAREN newlines_opt (
                       terminated_statement ELSE newlines_opt unterminated_statement
                     | unterminated_statement
                   ) 
private unterminated_statement_while ::= WHILE LPAREN expr RPAREN newlines_opt unterminated_statement
private unterminated_statement_for ::=
                   FOR LPAREN (
                       simple_statement_opt SEMICOLON newlines_opt expr_opt SEMICOLON newlines_opt simple_statement_opt RPAREN newlines_opt
                          unterminated_statement
                     | var_name IN gawk_var_name RPAREN newlines_opt
                          unterminated_statement
                  )

terminatable_statement ::= simple_statement
                 | BREAK
                 | CONTINUE
                 | NEXTFILE
                 | NEXT
                 | EXIT expr_opt
                 | RETURN expr_opt
                 | DO newlines_opt terminated_statement WHILE LPAREN expr RPAREN

private simple_statement_opt ::= simple_statement?

simple_statement ::= DELETE gawk_var_name
                 | expr
                 | print_statement

print_statement  ::= simple_print_statement output_redirection?

simple_print_statement ::=
                   PRINT  (print_expr_list | LPAREN expr_lst RPAREN)?
                 | PRINTF (print_expr_list | LPAREN expr_lst RPAREN)

private gawk_pipe ::= PIPE_AMP | PIPE
output_redirection ::= (GT|APPEND|gawk_pipe) expr

private gawk_expr     ::= TYPED_ERE | expr

// named so because of name clash during code generation
expr_lst ::= expr (COMMA newlines_opt expr)*

gawk_func_call_list    ::= gawk_expr (COMMA newlines_opt gawk_expr)*
private gawk_func_call_list_opt ::= gawk_func_call_list?

private expr_opt         ::= expr?

expr             ::= unary_expr | non_unary_expr

/*
    Eliminate left recursion: https://web.cs.wpi.edu/~kal/PLT/PLT4.1.2.html

    A --> A α | β
    introduce a new nonterminal A' and rewrite the rule as

    A --> β A'
    A' --> ε | α A'   <-->  A' --> (α A')?
*/
unary_expr       ::= (ADD|SUB)  expr unary_expr1

private unary_expr1      ::= [
                        (    POW      expr
                           | MUL      expr
                           | DIV      expr
                           | MOD      expr
                           | ADD      expr
                           | SUB      expr
                           |          non_unary_expr
                           | LT       expr
                           | LE       expr
                           | NE       expr
                           | EQ       expr
                           | GT       expr
                           | GE       expr
                           | MATCH    gawk_expr
                           | NO_MATCH gawk_expr
                           | IN gawk_var_name
                           | AND newlines_opt expr
                           | OR  newlines_opt expr
                           | ternary_expr
                           | gawk_pipe simple_get
                       )
                       unary_expr1
                   ]

// newlines in ternary are Gawk-only feature
private ternary_expr       ::= QUESTION newlines_opt expr       COLON newlines_opt expr
private ternary_print_expr ::= QUESTION newlines_opt print_expr COLON newlines_opt print_expr

non_unary_expr   ::= (
                           LPAREN ( expr RPAREN
                                  | expr_lst RPAREN IN gawk_var_name
                                  )
                         | NOT expr
                         | simple_get (LT expr)?
                         | NUMBER
                         | STRING
                         | ERE
                         | INCR lvalue
                         | DECR lvalue
                         | function_call_expr
                         | lvalue [   INCR
                                    | DECR
                                    | POW_ASSIGN expr
                                    | MOD_ASSIGN expr
                                    | MUL_ASSIGN expr
                                    | DIV_ASSIGN expr
                                    | ADD_ASSIGN expr
                                    | SUB_ASSIGN expr
                                    | ASSIGN     gawk_expr
                                  ]
                     )
                     non_unary_expr1

fake function_call               ::= gawk_func_call_list_opt
{
    mixin="intellij_awk.psi.AwkNamedElementImpl"
    implements="intellij_awk.psi.AwkNamedElement"
}

function_call_expr               ::= function_call_user | function_call_built_in {
    extends=function_call
    elementType=function_call
}

private func_call_args_start ::= LPAREN gawk_func_call_list_opt {
    pin=1
    recoverWhile=recover_on_rparen
}
private recover_on_rparen ::= !RPAREN
function_call_user     ::= (function_call_name | AT user_var_name) func_call_args_start RPAREN /* no white space allowed before LPAREN */
function_call_built_in ::= (BUILTIN_FUNC_NAME | BUILTIN_FUNC_NAME_GAWK) [ func_call_args_start RPAREN ]

function_call_name          ::= FUNC_NAME
{
    mixin="intellij_awk.psi.AwkFunctionCallNameMixin"
    implements="intellij_awk.psi.AwkNamedElement"
}

private non_unary_expr1     ::= [
                          (     POW      expr
                              | MUL      expr
                              | DIV      expr
                              | MOD      expr
                              | ADD      expr
                              | SUB      expr
                              |          non_unary_expr
                              | LT       expr
                              | LE       expr
                              | NE       expr
                              | EQ       expr
                              | GT       expr
                              | GE       expr
                              | MATCH    gawk_expr
                              | NO_MATCH gawk_expr
                              | IN gawk_var_name
                              | AND newlines_opt expr
                              | OR  newlines_opt expr
                              | ternary_expr
                              | gawk_pipe simple_get
                          )
                          non_unary_expr1
                      ]

print_expr_list  ::= print_expr (COMMA newlines_opt print_expr)*

print_expr       ::= unary_print_expr | non_unary_print_expr

private gawk_print_expr ::= TYPED_ERE | print_expr

private unary_print_expr ::= (ADD|SUB) print_expr unary_print_expr1

private unary_print_expr1  ::= [
                            (
                                  POW      print_expr
                                | MUL      print_expr
                                | DIV      print_expr
                                | MOD      print_expr
                                | ADD      print_expr
                                | SUB      print_expr
                                |          non_unary_print_expr
                                | MATCH    gawk_print_expr
                                | NO_MATCH gawk_print_expr
                                | IN gawk_var_name
                                | AND newlines_opt print_expr
                                | OR  newlines_opt print_expr
                                | ternary_print_expr
                            )
                            unary_print_expr1
                        ]

private non_unary_print_expr ::= (
                       LPAREN expr RPAREN
                     | NOT print_expr
                     | LPAREN expr_lst RPAREN IN gawk_var_name
                     | simple_get
                     | NUMBER
                     | STRING
                     | ERE
                     | INCR lvalue
                     | DECR lvalue
                     | function_call_expr
                     | lvalue [   INCR
                                | DECR
                                | POW_ASSIGN print_expr
                                | MOD_ASSIGN print_expr
                                | MUL_ASSIGN print_expr
                                | DIV_ASSIGN print_expr
                                | ADD_ASSIGN print_expr
                                | SUB_ASSIGN print_expr
                                | ASSIGN     print_expr
                              ]
                 )
                 non_unary_print_expr1

private non_unary_print_expr1 ::= [
                            (
                                  POW      print_expr
                                | MUL      print_expr
                                | DIV      print_expr
                                | MOD      print_expr
                                | ADD      print_expr
                                | SUB      print_expr
                                |          non_unary_print_expr
                                | LT       print_expr
                                | LE       print_expr
                                | NE       print_expr
                                | EQ       print_expr
                                //  no GT since in print context this is redirect
                                | GE       print_expr
                                | MATCH    gawk_print_expr
                                | NO_MATCH gawk_print_expr
                                | IN gawk_var_name
                                | AND newlines_opt print_expr
                                | OR  newlines_opt print_expr
                                | ternary_print_expr
                            )
                            non_unary_print_expr1
                          ]

lvalue           ::= gawk_var_name | DOLLAR expr

// XXX this covers a[1][2][3] like in Gawk
// XXX awk only supports a[1]
private gawk_var_name ::= var_name (LBRACKET expr_lst RBRACKET)*

// XXX for some reason the below makes it terribly slow or hanging on profile5.awk
/*private gawk_var_name ::= var_name (subscript_start RBRACKET)*
private subscript_start ::= LBRACKET expr_lst {
    pin=1
    recoverWhile=recover_on_rbracket
}
private recover_on_rbracket ::= !RBRACKET*/

private var_name ::= builtin_var_name | user_var_name

builtin_var_name ::= SPECIAL_VAR_NAME | SPECIAL_VAR_NAME_GAWK
{
    mixin="intellij_awk.psi.AwkNamedElementImpl"
    implements="intellij_awk.psi.AwkNamedElement"
}

user_var_name ::= VAR_NAME {
    mixin="intellij_awk.psi.AwkUserVarNameMixin"
    implements="intellij_awk.psi.AwkNamedElement"
    stubClass="intellij_awk.psi.AwkUserVarNameStub"
    elementTypeFactory="intellij_awk.psi.AwkElementType.getStubBasedElementType"
}

simple_get       ::= GETLINE lvalue?

private newlines_opt      ::= NEWLINE*
